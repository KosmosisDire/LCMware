/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package core;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
/**
 * System status
 */
public final class SystemStatus implements lcm.lcm.LCMEncodable
{
    public core.Header header;

    public String node_name;

    public String status;

    /**
     * "healthy", "warning", "error", "unknown"
     */
    public double cpu_usage;

    public double memory_usage;

    public double uptime_seconds;

    public int errors_size;

    /**
     * LCM Type: string[errors_size]
     */
    public String errors[];

 
    public SystemStatus()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x2438d6a50b3dd385L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(core.SystemStatus.class))
            return 0L;
 
        classes.add(core.SystemStatus.class);
        long hash = LCM_FINGERPRINT_BASE
             + core.Header._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        this.header._encodeRecursive(outs); 
 
        __strbuf = new char[this.node_name.length()]; this.node_name.getChars(0, this.node_name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.status.length()]; this.status.getChars(0, this.status.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeDouble(this.cpu_usage); 
 
        outs.writeDouble(this.memory_usage); 
 
        outs.writeDouble(this.uptime_seconds); 
 
        outs.writeInt(this.errors_size); 
 
        for (int a = 0; a < this.errors_size; a++) {
            __strbuf = new char[this.errors[a].length()]; this.errors[a].getChars(0, this.errors[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
    }
 
    public SystemStatus(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public SystemStatus(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static core.SystemStatus _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        core.SystemStatus o = new core.SystemStatus();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.header = core.Header._decodeRecursiveFactory(ins);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.node_name = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.status = new String(__strbuf);
 
        this.cpu_usage = ins.readDouble();
 
        this.memory_usage = ins.readDouble();
 
        this.uptime_seconds = ins.readDouble();
 
        this.errors_size = ins.readInt();
 
        this.errors = new String[(int) errors_size];
        for (int a = 0; a < this.errors_size; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.errors[a] = new String(__strbuf);
        }
 
    }
 
    public core.SystemStatus copy()
    {
        core.SystemStatus outobj = new core.SystemStatus();
        outobj.header = this.header.copy();
 
        outobj.node_name = this.node_name;
 
        outobj.status = this.status;
 
        outobj.cpu_usage = this.cpu_usage;
 
        outobj.memory_usage = this.memory_usage;
 
        outobj.uptime_seconds = this.uptime_seconds;
 
        outobj.errors_size = this.errors_size;
 
        outobj.errors = new String[(int) errors_size];
        if (this.errors_size > 0)
            System.arraycopy(this.errors, 0, outobj.errors, 0, (int) this.errors_size); 
        return outobj;
    }
 
}

