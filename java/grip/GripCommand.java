/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package grip;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class GripCommand implements lcm.lcm.LCMEncodable
{
    public core.Header header;

    public float position;

    public float speed;

    public float force;

 
    public GripCommand()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xc2e54379d3cca894L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(grip.GripCommand.class))
            return 0L;
 
        classes.add(grip.GripCommand.class);
        long hash = LCM_FINGERPRINT_BASE
             + core.Header._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.header._encodeRecursive(outs); 
 
        outs.writeFloat(this.position); 
 
        outs.writeFloat(this.speed); 
 
        outs.writeFloat(this.force); 
 
    }
 
    public GripCommand(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public GripCommand(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static grip.GripCommand _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        grip.GripCommand o = new grip.GripCommand();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.header = core.Header._decodeRecursiveFactory(ins);
 
        this.position = ins.readFloat();
 
        this.speed = ins.readFloat();
 
        this.force = ins.readFloat();
 
    }
 
    public grip.GripCommand copy()
    {
        grip.GripCommand outobj = new grip.GripCommand();
        outobj.header = this.header.copy();
 
        outobj.position = this.position;
 
        outobj.speed = this.speed;
 
        outobj.force = this.force;
 
        return outobj;
    }
 
}

