/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package core;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
/**
 * Basic data service requests/responses
 */
public final class BoolRequest implements lcm.lcm.LCMEncodable
{
    public core.Header header;

    public boolean value;

 
    public BoolRequest()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x41b5023b3bac2291L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(core.BoolRequest.class))
            return 0L;
 
        classes.add(core.BoolRequest.class);
        long hash = LCM_FINGERPRINT_BASE
             + core.Header._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.header._encodeRecursive(outs); 
 
        outs.writeByte( this.value ? 1 : 0); 
 
    }
 
    public BoolRequest(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public BoolRequest(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static core.BoolRequest _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        core.BoolRequest o = new core.BoolRequest();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.header = core.Header._decodeRecursiveFactory(ins);
 
        this.value = ins.readByte()!=0;
 
    }
 
    public core.BoolRequest copy()
    {
        core.BoolRequest outobj = new core.BoolRequest();
        outobj.header = this.header.copy();
 
        outobj.value = this.value;
 
        return outobj;
    }
 
}

