/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package core;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class KeyValueArrayMsg implements lcm.lcm.LCMEncodable
{
    public core.Header header;

    public int pairs_size;

    /**
     * LCM Type: string[pairs_size]
     */
    public String keys[];

    /**
     * LCM Type: string[pairs_size]
     */
    public String values[];

 
    public KeyValueArrayMsg()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x1f9ae7bb6f9c3bdeL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(core.KeyValueArrayMsg.class))
            return 0L;
 
        classes.add(core.KeyValueArrayMsg.class);
        long hash = LCM_FINGERPRINT_BASE
             + core.Header._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        this.header._encodeRecursive(outs); 
 
        outs.writeInt(this.pairs_size); 
 
        for (int a = 0; a < this.pairs_size; a++) {
            __strbuf = new char[this.keys[a].length()]; this.keys[a].getChars(0, this.keys[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.pairs_size; a++) {
            __strbuf = new char[this.values[a].length()]; this.values[a].getChars(0, this.values[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
    }
 
    public KeyValueArrayMsg(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public KeyValueArrayMsg(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static core.KeyValueArrayMsg _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        core.KeyValueArrayMsg o = new core.KeyValueArrayMsg();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.header = core.Header._decodeRecursiveFactory(ins);
 
        this.pairs_size = ins.readInt();
 
        this.keys = new String[(int) pairs_size];
        for (int a = 0; a < this.pairs_size; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.keys[a] = new String(__strbuf);
        }
 
        this.values = new String[(int) pairs_size];
        for (int a = 0; a < this.pairs_size; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.values[a] = new String(__strbuf);
        }
 
    }
 
    public core.KeyValueArrayMsg copy()
    {
        core.KeyValueArrayMsg outobj = new core.KeyValueArrayMsg();
        outobj.header = this.header.copy();
 
        outobj.pairs_size = this.pairs_size;
 
        outobj.keys = new String[(int) pairs_size];
        if (this.pairs_size > 0)
            System.arraycopy(this.keys, 0, outobj.keys, 0, (int) this.pairs_size); 
        outobj.values = new String[(int) pairs_size];
        if (this.pairs_size > 0)
            System.arraycopy(this.values, 0, outobj.values, 0, (int) this.pairs_size); 
        return outobj;
    }
 
}

