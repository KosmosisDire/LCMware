/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package examples;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
/**
 * Action types for joint trajectory following
 */
public final class FollowJointTrajectoryGoal implements lcm.lcm.LCMEncodable
{
    public core.Header header;

    public int num_joints;

    /**
     * LCM Type: string[num_joints]
     */
    public String joint_names[];

    public int num_points;

    /**
     * LCM Type: examples.JointTrajectoryPoint[num_points]
     */
    public examples.JointTrajectoryPoint points[];

 
    public FollowJointTrajectoryGoal()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x3b6eb121f22a1150L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(examples.FollowJointTrajectoryGoal.class))
            return 0L;
 
        classes.add(examples.FollowJointTrajectoryGoal.class);
        long hash = LCM_FINGERPRINT_BASE
             + core.Header._hashRecursive(classes)
             + examples.JointTrajectoryPoint._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        this.header._encodeRecursive(outs); 
 
        outs.writeInt(this.num_joints); 
 
        for (int a = 0; a < this.num_joints; a++) {
            __strbuf = new char[this.joint_names[a].length()]; this.joint_names[a].getChars(0, this.joint_names[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        outs.writeInt(this.num_points); 
 
        for (int a = 0; a < this.num_points; a++) {
            this.points[a]._encodeRecursive(outs); 
        }
 
    }
 
    public FollowJointTrajectoryGoal(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public FollowJointTrajectoryGoal(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static examples.FollowJointTrajectoryGoal _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        examples.FollowJointTrajectoryGoal o = new examples.FollowJointTrajectoryGoal();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.header = core.Header._decodeRecursiveFactory(ins);
 
        this.num_joints = ins.readInt();
 
        this.joint_names = new String[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.joint_names[a] = new String(__strbuf);
        }
 
        this.num_points = ins.readInt();
 
        this.points = new examples.JointTrajectoryPoint[(int) num_points];
        for (int a = 0; a < this.num_points; a++) {
            this.points[a] = examples.JointTrajectoryPoint._decodeRecursiveFactory(ins);
        }
 
    }
 
    public examples.FollowJointTrajectoryGoal copy()
    {
        examples.FollowJointTrajectoryGoal outobj = new examples.FollowJointTrajectoryGoal();
        outobj.header = this.header.copy();
 
        outobj.num_joints = this.num_joints;
 
        outobj.joint_names = new String[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.joint_names, 0, outobj.joint_names, 0, (int) this.num_joints); 
        outobj.num_points = this.num_points;
 
        outobj.points = new examples.JointTrajectoryPoint[(int) num_points];
        for (int a = 0; a < this.num_points; a++) {
            outobj.points[a] = this.points[a].copy();
        }
 
        return outobj;
    }
 
}

