"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import core

class Command(object):
    """ Generic command/response """

    __slots__ = ["header", "command", "args_size", "args"]

    __typenames__ = ["core.Header", "string", "int32_t", "string"]

    __dimensions__ = [None, None, None, ["args_size"]]

    def __init__(self):
        self.header = core.Header()
        """ LCM Type: core.Header """
        self.command = ""
        """ LCM Type: string """
        self.args_size = 0
        """ LCM Type: int32_t """
        self.args = []
        """ LCM Type: string[args_size] """

    def encode(self):
        buf = BytesIO()
        buf.write(Command._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == core.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        __command_encoded = self.command.encode('utf-8')
        buf.write(struct.pack('>I', len(__command_encoded)+1))
        buf.write(__command_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.args_size))
        for i0 in range(self.args_size):
            __args_encoded = self.args[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__args_encoded)+1))
            buf.write(__args_encoded)
            buf.write(b"\0")

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Command._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Command._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = Command()
        self.header = core.Header._decode_one(buf)
        __command_len = struct.unpack('>I', buf.read(4))[0]
        self.command = buf.read(__command_len)[:-1].decode('utf-8', 'replace')
        self.args_size = struct.unpack(">i", buf.read(4))[0]
        self.args = []
        for i0 in range(self.args_size):
            __args_len = struct.unpack('>I', buf.read(4))[0]
            self.args.append(buf.read(__args_len)[:-1].decode('utf-8', 'replace'))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if Command in parents: return 0
        newparents = parents + [Command]
        tmphash = (0xe02c6175665c5731+ core.Header._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if Command._packed_fingerprint is None:
            Command._packed_fingerprint = struct.pack(">Q", Command._get_hash_recursive([]))
        return Command._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Command._get_packed_fingerprint())[0]

