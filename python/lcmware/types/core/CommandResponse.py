"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import core

class CommandResponse(object):

    __slots__ = ["response_header", "exit_code", "stdout_output", "stderr_output"]

    __typenames__ = ["core.ServiceResponseHeader", "int32_t", "string", "string"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.response_header = core.ServiceResponseHeader()
        """ LCM Type: core.ServiceResponseHeader """
        self.exit_code = 0
        """ LCM Type: int32_t """
        self.stdout_output = ""
        """ LCM Type: string """
        self.stderr_output = ""
        """ LCM Type: string """

    def encode(self):
        buf = BytesIO()
        buf.write(CommandResponse._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.response_header._get_packed_fingerprint() == core.ServiceResponseHeader._get_packed_fingerprint()
        self.response_header._encode_one(buf)
        buf.write(struct.pack(">i", self.exit_code))
        __stdout_output_encoded = self.stdout_output.encode('utf-8')
        buf.write(struct.pack('>I', len(__stdout_output_encoded)+1))
        buf.write(__stdout_output_encoded)
        buf.write(b"\0")
        __stderr_output_encoded = self.stderr_output.encode('utf-8')
        buf.write(struct.pack('>I', len(__stderr_output_encoded)+1))
        buf.write(__stderr_output_encoded)
        buf.write(b"\0")

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != CommandResponse._get_packed_fingerprint():
            raise ValueError("Decode error")
        return CommandResponse._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = CommandResponse()
        self.response_header = core.ServiceResponseHeader._decode_one(buf)
        self.exit_code = struct.unpack(">i", buf.read(4))[0]
        __stdout_output_len = struct.unpack('>I', buf.read(4))[0]
        self.stdout_output = buf.read(__stdout_output_len)[:-1].decode('utf-8', 'replace')
        __stderr_output_len = struct.unpack('>I', buf.read(4))[0]
        self.stderr_output = buf.read(__stderr_output_len)[:-1].decode('utf-8', 'replace')
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if CommandResponse in parents: return 0
        newparents = parents + [CommandResponse]
        tmphash = (0x4a22f509f80490e9+ core.ServiceResponseHeader._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if CommandResponse._packed_fingerprint is None:
            CommandResponse._packed_fingerprint = struct.pack(">Q", CommandResponse._get_hash_recursive([]))
        return CommandResponse._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", CommandResponse._get_packed_fingerprint())[0]

