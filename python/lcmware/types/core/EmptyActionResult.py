"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import core

class EmptyActionResult(object):

    __slots__ = ["status"]

    __typenames__ = ["core.ActionStatus"]

    __dimensions__ = [None]

    def __init__(self):
        self.status = core.ActionStatus()
        """ LCM Type: core.ActionStatus """

    def encode(self):
        buf = BytesIO()
        buf.write(EmptyActionResult._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.status._get_packed_fingerprint() == core.ActionStatus._get_packed_fingerprint()
        self.status._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != EmptyActionResult._get_packed_fingerprint():
            raise ValueError("Decode error")
        return EmptyActionResult._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = EmptyActionResult()
        self.status = core.ActionStatus._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if EmptyActionResult in parents: return 0
        newparents = parents + [EmptyActionResult]
        tmphash = (0x673746198de1ff0+ core.ActionStatus._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if EmptyActionResult._packed_fingerprint is None:
            EmptyActionResult._packed_fingerprint = struct.pack(">Q", EmptyActionResult._get_hash_recursive([]))
        return EmptyActionResult._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", EmptyActionResult._get_packed_fingerprint())[0]

