"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import core

class HeartbeatResponse(object):

    __slots__ = ["response_header", "server_timestamp_us", "server_name"]

    __typenames__ = ["core.ResponseHeader", "int64_t", "string"]

    __dimensions__ = [None, None, None]

    def __init__(self):
        self.response_header = core.ResponseHeader()
        """ LCM Type: core.ResponseHeader """
        self.server_timestamp_us = 0
        """ LCM Type: int64_t """
        self.server_name = ""
        """ LCM Type: string """

    def encode(self):
        buf = BytesIO()
        buf.write(HeartbeatResponse._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.response_header._get_packed_fingerprint() == core.ResponseHeader._get_packed_fingerprint()
        self.response_header._encode_one(buf)
        buf.write(struct.pack(">q", self.server_timestamp_us))
        __server_name_encoded = self.server_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__server_name_encoded)+1))
        buf.write(__server_name_encoded)
        buf.write(b"\0")

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != HeartbeatResponse._get_packed_fingerprint():
            raise ValueError("Decode error")
        return HeartbeatResponse._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = HeartbeatResponse()
        self.response_header = core.ResponseHeader._decode_one(buf)
        self.server_timestamp_us = struct.unpack(">q", buf.read(8))[0]
        __server_name_len = struct.unpack('>I', buf.read(4))[0]
        self.server_name = buf.read(__server_name_len)[:-1].decode('utf-8', 'replace')
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if HeartbeatResponse in parents: return 0
        newparents = parents + [HeartbeatResponse]
        tmphash = (0x9e7b39a2c45d0a1a+ core.ResponseHeader._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if HeartbeatResponse._packed_fingerprint is None:
            HeartbeatResponse._packed_fingerprint = struct.pack(">Q", HeartbeatResponse._get_hash_recursive([]))
        return HeartbeatResponse._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", HeartbeatResponse._get_packed_fingerprint())[0]

