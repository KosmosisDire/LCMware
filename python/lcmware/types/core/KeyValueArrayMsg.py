"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import core

class KeyValueArrayMsg(object):

    __slots__ = ["header", "pairs_size", "keys", "values"]

    __typenames__ = ["core.Header", "int32_t", "string", "string"]

    __dimensions__ = [None, None, ["pairs_size"], ["pairs_size"]]

    def __init__(self):
        self.header = core.Header()
        """ LCM Type: core.Header """
        self.pairs_size = 0
        """ LCM Type: int32_t """
        self.keys = []
        """ LCM Type: string[pairs_size] """
        self.values = []
        """ LCM Type: string[pairs_size] """

    def encode(self):
        buf = BytesIO()
        buf.write(KeyValueArrayMsg._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == core.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">i", self.pairs_size))
        for i0 in range(self.pairs_size):
            __keys_encoded = self.keys[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__keys_encoded)+1))
            buf.write(__keys_encoded)
            buf.write(b"\0")
        for i0 in range(self.pairs_size):
            __values_encoded = self.values[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__values_encoded)+1))
            buf.write(__values_encoded)
            buf.write(b"\0")

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != KeyValueArrayMsg._get_packed_fingerprint():
            raise ValueError("Decode error")
        return KeyValueArrayMsg._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = KeyValueArrayMsg()
        self.header = core.Header._decode_one(buf)
        self.pairs_size = struct.unpack(">i", buf.read(4))[0]
        self.keys = []
        for i0 in range(self.pairs_size):
            __keys_len = struct.unpack('>I', buf.read(4))[0]
            self.keys.append(buf.read(__keys_len)[:-1].decode('utf-8', 'replace'))
        self.values = []
        for i0 in range(self.pairs_size):
            __values_len = struct.unpack('>I', buf.read(4))[0]
            self.values.append(buf.read(__values_len)[:-1].decode('utf-8', 'replace'))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if KeyValueArrayMsg in parents: return 0
        newparents = parents + [KeyValueArrayMsg]
        tmphash = (0x1f9ae7bb6f9c3bde+ core.Header._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if KeyValueArrayMsg._packed_fingerprint is None:
            KeyValueArrayMsg._packed_fingerprint = struct.pack(">Q", KeyValueArrayMsg._get_hash_recursive([]))
        return KeyValueArrayMsg._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", KeyValueArrayMsg._get_packed_fingerprint())[0]

