"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import core

class SystemStatus(object):
    """ System status """

    __slots__ = ["header", "node_name", "status", "cpu_usage", "memory_usage", "uptime_seconds", "errors_size", "errors"]

    __typenames__ = ["core.Header", "string", "string", "double", "double", "double", "int32_t", "string"]

    __dimensions__ = [None, None, None, None, None, None, None, ["errors_size"]]

    def __init__(self):
        self.header = core.Header()
        """ LCM Type: core.Header """
        self.node_name = ""
        """ LCM Type: string """
        self.status = ""
        """ LCM Type: string """
        self.cpu_usage = 0.0
        """
        "healthy", "warning", "error", "unknown"
        LCM Type: double
        """

        self.memory_usage = 0.0
        """ LCM Type: double """
        self.uptime_seconds = 0.0
        """ LCM Type: double """
        self.errors_size = 0
        """ LCM Type: int32_t """
        self.errors = []
        """ LCM Type: string[errors_size] """

    def encode(self):
        buf = BytesIO()
        buf.write(SystemStatus._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == core.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        __node_name_encoded = self.node_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__node_name_encoded)+1))
        buf.write(__node_name_encoded)
        buf.write(b"\0")
        __status_encoded = self.status.encode('utf-8')
        buf.write(struct.pack('>I', len(__status_encoded)+1))
        buf.write(__status_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">dddi", self.cpu_usage, self.memory_usage, self.uptime_seconds, self.errors_size))
        for i0 in range(self.errors_size):
            __errors_encoded = self.errors[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__errors_encoded)+1))
            buf.write(__errors_encoded)
            buf.write(b"\0")

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != SystemStatus._get_packed_fingerprint():
            raise ValueError("Decode error")
        return SystemStatus._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = SystemStatus()
        self.header = core.Header._decode_one(buf)
        __node_name_len = struct.unpack('>I', buf.read(4))[0]
        self.node_name = buf.read(__node_name_len)[:-1].decode('utf-8', 'replace')
        __status_len = struct.unpack('>I', buf.read(4))[0]
        self.status = buf.read(__status_len)[:-1].decode('utf-8', 'replace')
        self.cpu_usage, self.memory_usage, self.uptime_seconds, self.errors_size = struct.unpack(">dddi", buf.read(28))
        self.errors = []
        for i0 in range(self.errors_size):
            __errors_len = struct.unpack('>I', buf.read(4))[0]
            self.errors.append(buf.read(__errors_len)[:-1].decode('utf-8', 'replace'))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if SystemStatus in parents: return 0
        newparents = parents + [SystemStatus]
        tmphash = (0x2438d6a50b3dd385+ core.Header._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if SystemStatus._packed_fingerprint is None:
            SystemStatus._packed_fingerprint = struct.pack(">Q", SystemStatus._get_hash_recursive([]))
        return SystemStatus._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", SystemStatus._get_packed_fingerprint())[0]

