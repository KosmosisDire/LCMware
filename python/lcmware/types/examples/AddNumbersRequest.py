"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import core

class AddNumbersRequest(object):
    """ Service types for simple math operations """

    __slots__ = ["header", "a", "b"]

    __typenames__ = ["core.Header", "double", "double"]

    __dimensions__ = [None, None, None]

    def __init__(self):
        self.header = core.Header()
        """ LCM Type: core.Header """
        self.a = 0.0
        """ LCM Type: double """
        self.b = 0.0
        """ LCM Type: double """

    def encode(self):
        buf = BytesIO()
        buf.write(AddNumbersRequest._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == core.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">dd", self.a, self.b))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != AddNumbersRequest._get_packed_fingerprint():
            raise ValueError("Decode error")
        return AddNumbersRequest._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = AddNumbersRequest()
        self.header = core.Header._decode_one(buf)
        self.a, self.b = struct.unpack(">dd", buf.read(16))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if AddNumbersRequest in parents: return 0
        newparents = parents + [AddNumbersRequest]
        tmphash = (0x4b4b622d2331f28+ core.Header._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if AddNumbersRequest._packed_fingerprint is None:
            AddNumbersRequest._packed_fingerprint = struct.pack(">Q", AddNumbersRequest._get_hash_recursive([]))
        return AddNumbersRequest._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", AddNumbersRequest._get_packed_fingerprint())[0]

