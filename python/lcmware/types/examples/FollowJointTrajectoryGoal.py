"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import core

import examples

class FollowJointTrajectoryGoal(object):
    """ Action types for joint trajectory following """

    __slots__ = ["header", "num_joints", "joint_names", "num_points", "points"]

    __typenames__ = ["core.Header", "int32_t", "string", "int32_t", "examples.JointTrajectoryPoint"]

    __dimensions__ = [None, None, ["num_joints"], None, ["num_points"]]

    def __init__(self):
        self.header = core.Header()
        """ LCM Type: core.Header """
        self.num_joints = 0
        """ LCM Type: int32_t """
        self.joint_names = []
        """ LCM Type: string[num_joints] """
        self.num_points = 0
        """ LCM Type: int32_t """
        self.points = []
        """ LCM Type: examples.JointTrajectoryPoint[num_points] """

    def encode(self):
        buf = BytesIO()
        buf.write(FollowJointTrajectoryGoal._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == core.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">i", self.num_joints))
        for i0 in range(self.num_joints):
            __joint_names_encoded = self.joint_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__joint_names_encoded)+1))
            buf.write(__joint_names_encoded)
            buf.write(b"\0")
        buf.write(struct.pack(">i", self.num_points))
        for i0 in range(self.num_points):
            assert self.points[i0]._get_packed_fingerprint() == examples.JointTrajectoryPoint._get_packed_fingerprint()
            self.points[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != FollowJointTrajectoryGoal._get_packed_fingerprint():
            raise ValueError("Decode error")
        return FollowJointTrajectoryGoal._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = FollowJointTrajectoryGoal()
        self.header = core.Header._decode_one(buf)
        self.num_joints = struct.unpack(">i", buf.read(4))[0]
        self.joint_names = []
        for i0 in range(self.num_joints):
            __joint_names_len = struct.unpack('>I', buf.read(4))[0]
            self.joint_names.append(buf.read(__joint_names_len)[:-1].decode('utf-8', 'replace'))
        self.num_points = struct.unpack(">i", buf.read(4))[0]
        self.points = []
        for i0 in range(self.num_points):
            self.points.append(examples.JointTrajectoryPoint._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if FollowJointTrajectoryGoal in parents: return 0
        newparents = parents + [FollowJointTrajectoryGoal]
        tmphash = (0x3b6eb121f22a1150+ core.Header._get_hash_recursive(newparents)+ examples.JointTrajectoryPoint._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if FollowJointTrajectoryGoal._packed_fingerprint is None:
            FollowJointTrajectoryGoal._packed_fingerprint = struct.pack(">Q", FollowJointTrajectoryGoal._get_hash_recursive([]))
        return FollowJointTrajectoryGoal._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", FollowJointTrajectoryGoal._get_packed_fingerprint())[0]

