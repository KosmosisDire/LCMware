"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class JointTrajectoryPoint(object):
    """ Joint trajectory point for action demo """

    __slots__ = ["num_positions", "positions", "velocities", "accelerations", "time_from_start"]

    __typenames__ = ["int32_t", "double", "double", "double", "double"]

    __dimensions__ = [None, ["num_positions"], ["num_positions"], ["num_positions"], None]

    def __init__(self):
        self.num_positions = 0
        """ LCM Type: int32_t """
        self.positions = []
        """ LCM Type: double[num_positions] """
        self.velocities = []
        """ LCM Type: double[num_positions] """
        self.accelerations = []
        """ LCM Type: double[num_positions] """
        self.time_from_start = 0.0
        """ LCM Type: double """

    def encode(self):
        buf = BytesIO()
        buf.write(JointTrajectoryPoint._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.num_positions))
        buf.write(struct.pack('>%dd' % self.num_positions, *self.positions[:self.num_positions]))
        buf.write(struct.pack('>%dd' % self.num_positions, *self.velocities[:self.num_positions]))
        buf.write(struct.pack('>%dd' % self.num_positions, *self.accelerations[:self.num_positions]))
        buf.write(struct.pack(">d", self.time_from_start))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != JointTrajectoryPoint._get_packed_fingerprint():
            raise ValueError("Decode error")
        return JointTrajectoryPoint._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = JointTrajectoryPoint()
        self.num_positions = struct.unpack(">i", buf.read(4))[0]
        self.positions = struct.unpack('>%dd' % self.num_positions, buf.read(self.num_positions * 8))
        self.velocities = struct.unpack('>%dd' % self.num_positions, buf.read(self.num_positions * 8))
        self.accelerations = struct.unpack('>%dd' % self.num_positions, buf.read(self.num_positions * 8))
        self.time_from_start = struct.unpack(">d", buf.read(8))[0]
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if JointTrajectoryPoint in parents: return 0
        tmphash = (0x31e4435a33c6e651) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if JointTrajectoryPoint._packed_fingerprint is None:
            JointTrajectoryPoint._packed_fingerprint = struct.pack(">Q", JointTrajectoryPoint._get_hash_recursive([]))
        return JointTrajectoryPoint._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", JointTrajectoryPoint._get_packed_fingerprint())[0]

