"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import core

class GripResult(object):

    __slots__ = ["status", "state", "position"]

    __typenames__ = ["core.ActionStatus", "int32_t", "float"]

    __dimensions__ = [None, None, None]

    MOVING = 1
    FINISHED = 3
    OBJECT_FOUND = 4

    def __init__(self):
        self.status = core.ActionStatus()
        """ LCM Type: core.ActionStatus """
        self.state = 0
        """ LCM Type: int32_t """
        self.position = 0.0
        """ LCM Type: float """

    def encode(self):
        buf = BytesIO()
        buf.write(GripResult._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.status._get_packed_fingerprint() == core.ActionStatus._get_packed_fingerprint()
        self.status._encode_one(buf)
        buf.write(struct.pack(">if", self.state, self.position))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != GripResult._get_packed_fingerprint():
            raise ValueError("Decode error")
        return GripResult._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = GripResult()
        self.status = core.ActionStatus._decode_one(buf)
        self.state, self.position = struct.unpack(">if", buf.read(8))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if GripResult in parents: return 0
        newparents = parents + [GripResult]
        tmphash = (0x3b4318f88964ec57+ core.ActionStatus._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if GripResult._packed_fingerprint is None:
            GripResult._packed_fingerprint = struct.pack(">Q", GripResult._get_hash_recursive([]))
        return GripResult._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", GripResult._get_packed_fingerprint())[0]

